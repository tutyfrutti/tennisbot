from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import sqlite3
import os

# –í–≤–µ–¥–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ API
api_id = 23580225  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π API ID
api_hash = "c66fdb54566318ca8f8109e7f8bd52b9"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π API Hash
bot_token = "7730561175:AAEdZm4YQiUzM87RjcukwrvHuCbQZ2U8_ts"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
image_dir = "images/"
os.makedirs(image_dir, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
app = Client("tennis_club_bot", api_id=api_id, api_hash=api_hash, bot_token=bot_token)

def get_tournaments():
    conn = sqlite3.connect('tennis_club.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM tournaments")
    tournaments = cursor.fetchall()
    conn.close()
    return tournaments

def get_tournament_by_id(tournament_id):
    conn = sqlite3.connect('tennis_club.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM tournaments WHERE id = ?", (tournament_id,))
    tournament = cursor.fetchone()
    conn.close()
    return tournament

def save_tournament(name, date, location, prize_pool, participants_count, image_path=""):
    conn = sqlite3.connect('tennis_club.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO tournaments (name, date, location, prize_pool, participants_count, image_path)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (name, date, location, prize_pool, participants_count, image_path))
    conn.commit()
    conn.close()

def update_tournament_image(tournament_id, image_path):
    conn = sqlite3.connect('tennis_club.db')
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE tournaments
        SET image_path = ?
        WHERE id = ?
    ''', (image_path, tournament_id))
    conn.commit()
    conn.close()

def add_player(first_name, last_name, rating):
    conn = sqlite3.connect('tennis_club.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO players (first_name, last_name, rating)
        VALUES (?, ?, ?)
    ''', (first_name, last_name, rating))
    conn.commit()
    conn.close()

def get_players():
    conn = sqlite3.connect('tennis_club.db')
    cursor = conn.cursor()
    cursor.execute("SELECT first_name, last_name, rating FROM players ORDER BY rating DESC")
    players = cursor.fetchall()
    conn.close()
    return players

@app.on_message(filters.command("start"))
async def start(client, message):
    await message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–Ω–Ω–∏—Å–Ω—ã–π –±–æ—Ç –∫–ª—É–±–∞ '–í–æ–ª–Ω–∞'!\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—É—Ä–Ω–∏—Ä—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏–≥—Ä–æ–∫–æ–≤.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/players - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–∏\n"
        "/tournaments - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã"
    )

@app.on_message(filters.command("tournaments"))
async def show_tournaments(client, message):
    tournaments = get_tournaments()
    keyboard = []
    for tournament in tournaments:
        keyboard.append([InlineKeyboardButton(tournament[1], callback_data=f"show_matches_{tournament[0]}")])

    await message.reply_text(
        "üìÖ **–°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤:**\n\n" + "\n".join(
            [f"- {tournament[1]} (–î–∞—Ç–∞: {tournament[2]})" for tournament in tournaments]),
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

@app.on_callback_query(filters.regex(r"^show_matches_\d+$"))
async def handle_callback_query(client, callback_query):
    tournament_id = int(callback_query.data.split("_")[2])
    tournament = get_tournament_by_id(tournament_id)

    if not tournament:
        await callback_query.message.reply_text("‚ùó –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    response = f"üìÖ {tournament[1]} (–î–∞—Ç–∞: {tournament[2]})\n\n"
    response += f"üìç –ú–µ—Å—Ç–æ: {tournament[3]}\n"
    response += f"üèÜ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: {tournament[4]}\n"
    response += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {tournament[5]}\n\n"
    response += "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π:\n"

    if callback_query.message.text != response:
        await callback_query.message.edit_text(response)
    else:
        print("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

    if tournament[6]:
        await callback_query.message.reply_photo(photo=tournament[6])

    await callback_query.answer()

@app.on_message(filters.command("players"))
async def show_players(client, message):
    players = get_players()
    if players:
        response = "üéæ –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–∏:\n\n"
        response += "\n".join([f"- {first_name} {last_name} (–†–µ–π—Ç–∏–Ω–≥: {rating})" for first_name, last_name, rating in players])
    else:
        response = "‚ùó –ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    await message.reply_text(response)


@app.on_message(filters.command("add_tournament") & filters.user([1499730239]))  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π user_id –∞–¥–º–∏–Ω–∞
async def add_tournament(client, message):
    try:
        # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –ø—Ä–æ–±–µ–ª—ã
        command, rest = message.text.split(maxsplit=1)

        # –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ,–î–∞—Ç–∞,–ú–µ—Å—Ç–æ,–ü—Ä–∏–∑–æ–≤–æ–π_—Ñ–æ–Ω–¥,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        parts = rest.split(",", 4)

        if len(parts) != 5:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –û–∂–∏–¥–∞–µ—Ç—Å—è 5 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç—ã–º–∏.")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        name = parts[0].strip()
        date = parts[1].strip()
        location = parts[2].strip()
        prize_pool = parts[3].strip()
        participants_count = int(parts[4].strip())

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('tennis_club.db')
        cursor = conn.cursor()

        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID —Ç–µ–∫—É—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
        cursor.execute("SELECT MAX(id) FROM tournaments")
        max_id = cursor.fetchone()[0]
        if max_id is None:
            new_id = 1
        else:
            new_id = max_id + 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä —Å –Ω–æ–≤—ã–º ID
        cursor.execute('''
            INSERT INTO tournaments (id, name, date, location, prize_pool, participants_count, image_path)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (new_id, name, date, location, prize_pool, participants_count, ""))
        conn.commit()
        conn.close()

        await message.reply_text(
            f"‚úÖ –¢—É—Ä–Ω–∏—Ä '{name}' –¥–æ–±–∞–≤–ª–µ–Ω —Å ID {new_id} –Ω–∞ –¥–∞—Ç—É {date} –≤ –º–µ—Å—Ç–µ {location} —Å –ø—Ä–∏–∑–æ–≤—ã–º —Ñ–æ–Ω–¥–æ–º {prize_pool} –∏ {participants_count} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏. –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞.")
    except ValueError as ve:
        await message.reply_text(
            f"‚ùó –û—à–∏–±–∫–∞: {str(ve)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /add_tournament –ù–∞–∑–≤–∞–Ω–∏–µ,–î–∞—Ç–∞,–ú–µ—Å—Ç–æ,–ü—Ä–∏–∑–æ–≤–æ–π_—Ñ–æ–Ω–¥,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    except Exception as e:
        await message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


@app.on_message(filters.command("delete_tournament") & filters.user([1499730239]))  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π user_id –∞–¥–º–∏–Ω–∞
async def delete_tournament(client, message):
    try:
        # –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: /delete_tournament –ù–∞–∑–≤–∞–Ω–∏–µ
        parts = message.text.split(maxsplit=1)

        if len(parts) != 2:
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: /delete_tournament –ù–∞–∑–≤–∞–Ω–∏–µ")

        # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        command, tournament_name = parts

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—É—Ä–Ω–∏—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        conn = sqlite3.connect('tennis_club.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM tournaments WHERE name = ?", (tournament_name.strip(),))
        tournament = cursor.fetchone()

        if not tournament:
            raise ValueError(f"–¢—É—Ä–Ω–∏—Ä —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{tournament_name.strip()}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        tournament_id = tournament[0]

        # –£–¥–∞–ª—è–µ–º —Ç—É—Ä–Ω–∏—Ä
        cursor.execute('DELETE FROM tournaments WHERE id = ?', (tournament_id,))
        conn.commit()
        conn.close()

        await message.reply_text(f"‚úÖ –¢—É—Ä–Ω–∏—Ä —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{tournament_name.strip()}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    except ValueError as ve:
        await message.reply_text(f"‚ùó –û—à–∏–±–∫–∞: {str(ve)}")
    except Exception as e:
        await message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


@app.on_message(filters.photo & filters.user([1499730239]))  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π user_id –∞–¥–º–∏–Ω–∞
async def handle_photo(client, message):
    if message.caption:
        try:
            tournament_id = int(message.caption.strip())  # –ù–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞
            update_tournament_image(tournament_id, message.photo.file_id)
            await message.reply_text(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ç—É—Ä–Ω–∏—Ä—É #{tournament_id}.")
        except ValueError:
            await message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —Ç–µ–∫—Å—Ç–µ.")
    else:
        await message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —Ç–µ–∫—Å—Ç–µ.")

@app.on_message(filters.command("add_player") & filters.user([1499730239]))  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π user_id –∞–¥–º–∏–Ω–∞
async def add_player_command(client, message):
    try:
        # –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: /add_player –ò–º—è –§–∞–º–∏–ª–∏—è –†–µ–π—Ç–∏–Ω–≥
        _, first_name, last_name, rating = message.text.split(" ", 3)
        add_player(first_name, last_name, int(rating))
        await message.reply_text(f"‚úÖ –ò–≥—Ä–æ–∫ {first_name} {last_name} —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º {rating} –¥–æ–±–∞–≤–ª–µ–Ω.")
    except ValueError:
        await message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /add_player –ò–º—è –§–∞–º–∏–ª–∏—è –†–µ–π—Ç–∏–Ω–≥")
    except Exception as e:
        await message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    app.run()
