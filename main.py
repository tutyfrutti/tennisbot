from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import sqlite3
import os
import aiosqlite

# –í–≤–µ–¥–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ API
api_id = 23580225  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π API ID
ADMIN_USER_ID = 1499730239
api_hash = "c66fdb54566318ca8f8109e7f8bd52b9"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π API Hash
bot_token = "7730561175:AAEdZm4YQiUzM87RjcukwrvHuCbQZ2U8_ts"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
image_dir = "images/"
os.makedirs(image_dir, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
app = Client("tennis_club_bot", api_id=api_id, api_hash=api_hash, bot_token=bot_token)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞
tournament_data = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞
player_data = {}


async def fetch_players():
    # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
    async with aiosqlite.connect('tennis_club.db') as db:
        async with db.execute('SELECT id, first_name, last_name, rating FROM players ORDER BY rating DESC') as cursor:
            players = await cursor.fetchall()
    return players


def get_tournaments():
    conn = sqlite3.connect('tennis_club.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM tournaments")
    tournaments = cursor.fetchall()
    conn.close()
    return tournaments


def get_tournament_by_id(tournament_id):
    conn = sqlite3.connect('tennis_club.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM tournaments WHERE id = ?", (tournament_id,))
    tournament = cursor.fetchone()
    conn.close()
    return tournament


def save_tournament(name, date, location, prize_pool, participants_count, status='active', image_path=""):
    conn = sqlite3.connect('tennis_club.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤
    cursor.execute("SELECT MAX(id) FROM tournaments")
    max_id = cursor.fetchone()[0]
    next_id = max_id + 1 if max_id is not None else 1  # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å 1

    cursor.execute('''INSERT INTO tournaments (id, name, date, location, prize_pool, participants_count, image_path, status)
                      VALUES (?, ?, ?, ?, ?, ?, ?, ?)''',
                   (next_id, name, date, location, prize_pool, participants_count, image_path, status))
    conn.commit()
    conn.close()


def update_tournament_image(tournament_id, image_path):
    conn = sqlite3.connect('tennis_club.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE tournaments SET image_path = ? WHERE id = ?', (image_path, tournament_id))
    conn.commit()
    conn.close()

async def add_player(first_name, last_name, rating):
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ–º ID
    async with aiosqlite.connect('tennis_club.db') as db:
        await db.execute(
            'INSERT INTO players (first_name, last_name, rating) VALUES (?, ?, ?)',
            (first_name, last_name, int(rating))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ int
        )
        await db.commit()

def get_players():
    conn = sqlite3.connect('tennis_club.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, first_name, last_name, rating FROM players ORDER BY rating DESC")
    players = cursor.fetchall()
    conn.close()
    return players


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Ç—É—Ä–Ω–∏—Ä
def add_tournament_request(tournament_id, user_id, username, full_name):
    conn = sqlite3.connect('tennis_club.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO tournament_requests (tournament_id, user_id, username, full_name)
        VALUES (?, ?, ?, ?)
    ''', (tournament_id, user_id, username, full_name))
    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
def get_tournament_requests(tournament_id):
    conn = sqlite3.connect('tennis_club.db')
    cursor = conn.cursor()
    cursor.execute("SELECT username, full_name FROM tournament_requests WHERE tournament_id = ?", (tournament_id,))
    requests = cursor.fetchall()
    conn.close()
    return requests


@app.on_message(filters.command("start"))
async def start(client, message):
    await message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–Ω–Ω–∏—Å–Ω—ã–π –±–æ—Ç –∫–ª—É–±–∞ '–í–æ–ª–Ω–∞'!\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—É—Ä–Ω–∏—Ä—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏–≥—Ä–æ–∫–æ–≤.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/players - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–∏\n"
        "/tournaments - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã"
    )


@app.on_message(filters.command("tournaments"))
async def show_tournaments(client, message):
    tournaments = get_tournaments()
    keyboard = []
    response = "üìÖ **–°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤:**\n\n"

    for tournament in tournaments:
        tournament_status = "–ê–∫—Ç–∏–≤–Ω—ã–π" if tournament[7].strip() == "active" else "–ó–∞–≤–µ—Ä—à–µ–Ω"
        keyboard.append([InlineKeyboardButton(tournament[1], callback_data=f"show_matches_{tournament[0]}")])
        response += f" {tournament[0]}: {tournament[1]} (–î–∞—Ç–∞: {tournament[2]}, –°—Ç–∞—Ç—É—Å: {tournament_status})\n"

    await message.reply_text(response, reply_markup=InlineKeyboardMarkup(keyboard))


@app.on_message(filters.photo)
async def handle_photo(client, message):
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    tournament_id = None

    if message.caption and message.caption.isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏
        tournament_id = int(message.caption)

    if tournament_id is None:
        await message.reply_text("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Ç—É—Ä–Ω–∏—Ä–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photo_file_id = message.photo.file_id  # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_tournament_image(tournament_id, photo_file_id)

    await message.reply_text("‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ç—É—Ä–Ω–∏—Ä—É.")


@app.on_callback_query(filters.regex(r"^show_matches_\d+$"))
async def handle_callback_query(client, callback_query):
    tournament_id = int(callback_query.data.split("_")[2])
    tournament = get_tournament_by_id(tournament_id)

    if not tournament:
        await callback_query.message.reply_text("‚ùó –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    response = f"üìÖ {tournament[1]} (–î–∞—Ç–∞: {tournament[2]}, –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω—ã–π' if tournament[7].strip() == 'active' else '–ó–∞–≤–µ—Ä—à–µ–Ω'})\n\n"
    response += f"üìç –ú–µ—Å—Ç–æ: {tournament[3]}\n"
    response += f"üèÜ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: {tournament[4]}\n"
    response += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {tournament[5]}\n\n"
    response += "üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:\n"

    requests = get_tournament_requests(tournament_id)
    if requests:
        for index, req in enumerate(requests, start=1):
            username = req[0]
            full_name = req[1]
            response += f"{index}. {full_name} (@{username})\n"
    else:
        response += "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤."

    keyboard = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if tournament[7].strip() == "active":
        keyboard.append([InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data=f"register_{tournament_id}")])

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if callback_query.from_user.id == ADMIN_USER_ID:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        keyboard.append([
            InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status_{tournament_id}"),
            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data=f"delete_{tournament_id}")
        ])

    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(response, reply_markup=reply_markup)
        if tournament[6]:
            await callback_query.message.reply_photo(photo=tournament[6])
    except Exception as e:
        await callback_query.message.reply_text("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    await callback_query.answer()


@app.on_callback_query(filters.regex(r"^register_\d+$"))
async def register_for_tournament(client, callback_query):
    tournament_id = int(callback_query.data.split("_")[1])
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    full_name = callback_query.from_user.first_name

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ
    requests = get_tournament_requests(tournament_id)
    if any(req[0] == username for req in requests):
        await callback_query.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä.", show_alert=True)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    add_tournament_request(tournament_id, user_id, username, full_name)
    await callback_query.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ —Ç—É—Ä–Ω–∏—Ä!", show_alert=True)


@app.on_callback_query(filters.regex(r"^delete_\d+$") & filters.user(ADMIN_USER_ID))
async def delete_tournament_callback(client, callback_query):
    tournament_id = int(callback_query.data.split("_")[1])
    conn = sqlite3.connect('tennis_club.db')
    cursor = conn.cursor()
    cursor.execute("DELETE FROM tournaments WHERE id = ?", (tournament_id,))
    conn.commit()
    cursor.execute("DELETE FROM tournament_requests WHERE tournament_id = ?", (tournament_id,))
    conn.commit()
    conn.close()

    await callback_query.answer("–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", show_alert=True)
    await callback_query.message.delete()


@app.on_callback_query(filters.regex(r"^change_status_\d+$") & filters.user(ADMIN_USER_ID))
async def change_status_callback(client, callback_query):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ callback_data
        tournament_id = int(
            callback_query.data.split("_")[2])  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ 2, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'change_status_{id}'

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
        tournament = get_tournament_by_id(tournament_id)

        if tournament is None:
            await callback_query.answer("–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞
        new_status = "finished" if tournament[7].strip() == "active" else "active"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('tennis_club.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE tournaments SET status = ? WHERE id = ?', (new_status, tournament_id))
        conn.commit()
        conn.close()

        await callback_query.answer(
            f"–°—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {'–ó–∞–≤–µ—Ä—à–µ–Ω' if new_status == 'finished' else '–ê–∫—Ç–∏–≤–Ω—ã–π'}.", show_alert=True)
        await callback_query.message.delete()

    except (IndexError, ValueError):
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞.", show_alert=True)
    except Exception as e:
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        print(f"–û—à–∏–±–∫–∞: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏


@app.on_message(filters.command("players"))
async def display_players(client, message):
    players = await fetch_players()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏–≥—Ä–æ–∫–æ–≤
    response = "üë• –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤:\n"
    for index, player in enumerate(players, start=1):
        response += f"{index} - {player[1]} {player[2]} - –†–µ–π—Ç–∏–Ω–≥: {player[3]}\n"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    admin_buttons = [
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="delete_player")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", callback_data="change_rating")]
    ]
    reply_markup = InlineKeyboardMarkup(admin_buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await message.reply_text(response, reply_markup=reply_markup)


@app.on_message(filters.command("admin_menu") & filters.user(ADMIN_USER_ID))
async def admin_menu(client, message):
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data='add_tournament')],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data='add_player')]  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await message.reply_text('–ê–¥–º–∏–Ω-–º–µ–Ω—é:', reply_markup=reply_markup)


@app.on_callback_query(filters.regex(r"^add_player$") & filters.user(ADMIN_USER_ID))
async def add_player_callback(client, callback_query):
    await callback_query.message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞:")
    player_data[callback_query.from_user.id] = {'step': 'first_name'}
    await callback_query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query


@app.on_callback_query(filters.regex(r"^add_tournament$") & filters.user(ADMIN_USER_ID))
async def add_tournament_callback(client, callback_query):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    await callback_query.message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:")
    tournament_data[callback_query.from_user.id] = {'step': 'name'}
    await callback_query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query


@app.on_message(filters.command("add_tournament"))
async def add_tournament_command(client, message):
    await message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:")
    tournament_data[message.from_user.id] = {'step': 'name'}

@app.on_message(filters.command("add_player"))
async def add_player_command(client, message):
    await message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞:")
    player_data[message.from_user.id] = {'step': 'first_name'}

@app.on_message(filters.text & filters.user(ADMIN_USER_ID))
async def handle_input(client, message):
    user_id = message.from_user.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
    if user_id in tournament_data:
        step = tournament_data[user_id]['step']

        if step == 'name':
            tournament_data[user_id]['name'] = message.text
            tournament_data[user_id]['step'] = 'date'
            await message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—É—Ä–Ω–∏—Ä–∞ (YYYY-MM-DD):")

        elif step == 'date':
            tournament_data[user_id]['date'] = message.text
            tournament_data[user_id]['step'] = 'location'
            await message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ç—É—Ä–Ω–∏—Ä–∞:")

        elif step == 'location':
            tournament_data[user_id]['location'] = message.text
            tournament_data[user_id]['step'] = 'prize_pool'
            await message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥:")

        elif step == 'prize_pool':
            tournament_data[user_id]['prize_pool'] = message.text
            tournament_data[user_id]['step'] = 'participants_count'
            await message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")

        elif step == 'participants_count':
            tournament_data[user_id]['participants_count'] = message.text

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            save_tournament(
                tournament_data[user_id]['name'],
                tournament_data[user_id]['date'],
                tournament_data[user_id]['location'],
                tournament_data[user_id]['prize_pool'],
                tournament_data[user_id]['participants_count']
            )
            await message.reply_text("‚úÖ –¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            del tournament_data[user_id]

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    elif user_id in player_data:
        step = player_data[user_id]['step']

        if step == 'first_name':
            player_data[user_id]['first_name'] = message.text
            player_data[user_id]['step'] = 'last_name'
            await message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏–≥—Ä–æ–∫–∞:")

        elif step == 'last_name':
            player_data[user_id]['last_name'] = message.text
            player_data[user_id]['step'] = 'rating'
            await message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞:")

        elif step == 'rating':
            player_data[user_id]['rating'] = message.text

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await add_player(  # –î–æ–±–∞–≤–ª–µ–Ω–æ await
                player_data[user_id]['first_name'],
                player_data[user_id]['last_name'],
                player_data[user_id]['rating']
            )
            await message.reply_text("‚úÖ –ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            del player_data[user_id]



@app.on_callback_query(filters.regex("delete_player") & filters.user(ADMIN_USER_ID))
async def delete_player(client, callback_query):
    players = await fetch_players()
    keyboard = []

    for player in players:
        keyboard.append([InlineKeyboardButton(f"{player[1]} {player[2]} - –†–µ–π—Ç–∏–Ω–≥: {player[3]}", callback_data=f"confirm_delete_{player[0]}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

@app.on_callback_query(filters.regex(r"^confirm_delete_\d+$") & filters.user(ADMIN_USER_ID))
async def confirm_delete_player(client, callback_query):
    player_id = int(callback_query.data.split("_")[2])

    async with aiosqlite.connect('tennis_club.db') as db:
        await db.execute("DELETE FROM players WHERE id = ?", (player_id,))
        await db.commit()

    await callback_query.answer("–ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", show_alert=True)
    await callback_query.message.delete()


@app.on_message(filters.text & filters.user(ADMIN_USER_ID))
async def handle_input(client, message):
    user_id = message.from_user.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    if user_id in player_data:
        step = player_data[user_id]['step']

        if step == 'delete_name':
            full_name = message.text.strip()
            first_name, last_name = full_name.split(maxsplit=1)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            async with aiosqlite.connect('tennis_club.db') as db:
                cursor = await db.execute(
                    'SELECT id FROM players WHERE first_name = ? AND last_name = ?',
                    (first_name, last_name)
                )
                player = await cursor.fetchone()

            if player:
                player_id = player[0]
                # –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                async with aiosqlite.connect('tennis_club.db') as db:
                    await db.execute('DELETE FROM players WHERE id = ?', (player_id,))
                    await db.commit()
                await message.reply_text(f"‚úÖ –ò–≥—Ä–æ–∫ {full_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            else:
                await message.reply_text(f"‚ùó –ò–≥—Ä–æ–∫ —Å –∏–º–µ–Ω–µ–º {full_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            del player_data[user_id]

#@Client.on_callback_query(filters.regex("change_rating"))
##async def change_rating(client, callback_query):
    # –õ–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–≥—Ä–æ–∫–∞
  #  await callback_query.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞.")
    # –¢—É—Ç —Ç–æ–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à—É—é –ª–æ–≥–∏–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞

if __name__ == "__main__":
    app.run()
