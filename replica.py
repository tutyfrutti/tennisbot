from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
import sqlite3
import os
import aiosqlite
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


# –í–≤–µ–¥–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ API
api_id = 23580225  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π API ID
ADMIN_USER_ID = 1499730239
api_hash = "c66fdb54566318ca8f8109e7f8bd52b9"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π API Hash
bot_token = "7730561175:AAEdZm4YQiUzM87RjcukwrvHuCbQZ2U8_ts"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
image_dir = "images/"
os.makedirs(image_dir, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
app = Client("tennis_club_bot", api_id=api_id, api_hash=api_hash, bot_token=bot_token)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞
tournament_data = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞
player_data = {}


async def fetch_players():
    # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
    async with aiosqlite.connect('tennis_club.db') as db:
        async with db.execute('SELECT id, first_name, last_name, rating FROM players ORDER BY rating DESC') as cursor:
            players = await cursor.fetchall()
    return players


def get_tournaments():
    conn = sqlite3.connect('tennis_club.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM tournaments")
    tournaments = cursor.fetchall()
    conn.close()
    return tournaments


def get_tournament_by_id(tournament_id):
    conn = sqlite3.connect('tennis_club.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM tournaments WHERE id = ?", (tournament_id,))
    tournament = cursor.fetchone()
    conn.close()
    return tournament


def save_tournament(name, date, location, prize_pool, participants_count, status='active', image_path=""):
    conn = sqlite3.connect('tennis_club.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤
    cursor.execute("SELECT MAX(id) FROM tournaments")
    max_id = cursor.fetchone()[0]
    next_id = max_id + 1 if max_id is not None else 1  # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å 1

    cursor.execute('''INSERT INTO tournaments (id, name, date, location, prize_pool, participants_count, image_path, status)
                      VALUES (?, ?, ?, ?, ?, ?, ?, ?)''',
                   (next_id, name, date, location, prize_pool, participants_count, image_path, status))
    conn.commit()
    conn.close()


def update_tournament_image(tournament_id, image_path):
    conn = sqlite3.connect('tennis_club.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE tournaments SET image_path = ? WHERE id = ?', (image_path, tournament_id))
    conn.commit()
    conn.close()


async def add_player(first_name, last_name, rating):
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ–º ID
    async with aiosqlite.connect('tennis_club.db') as db:
        await db.execute(
            'INSERT INTO players (first_name, last_name, rating) VALUES (?, ?, ?)',
            (first_name, last_name, int(rating))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ int
        )
        await db.commit()


async def get_player(db, first_name: str, surname: str):
    async with db.execute("SELECT * FROM players WHERE first_name = ? AND last_name = ?",
                          (first_name, surname)) as cursor:
        return await cursor.fetchone()


async def delete_player_from_db(first_name: str, last_name: str):
    async with aiosqlite.connect('tennis_club.db') as db:
        player = await get_player(db, first_name, last_name)

        if player:
            await db.execute("DELETE FROM players WHERE first_name = ? AND last_name = ?", (first_name, last_name))
            await db.commit()
            return True  # –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ
        return False  # –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Ç—É—Ä–Ω–∏—Ä
def add_tournament_request(tournament_id, user_id, username, full_name):
    conn = sqlite3.connect('tennis_club.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO tournament_requests (tournament_id, user_id, username, full_name)
        VALUES (?, ?, ?, ?)
    ''', (tournament_id, user_id, username, full_name))
    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
def get_tournament_requests(tournament_id):
    conn = sqlite3.connect('tennis_club.db')
    cursor = conn.cursor()
    cursor.execute("SELECT username, full_name FROM tournament_requests WHERE tournament_id = ?", (tournament_id,))
    requests = cursor.fetchall()
    conn.close()
    return requests


@app.on_message(filters.command("start"))
async def start(client, message):
    await message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–Ω–Ω–∏—Å–Ω—ã–π –±–æ—Ç –∫–ª—É–±–∞ '–í–æ–ª–Ω–∞'!\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—É—Ä–Ω–∏—Ä—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏–≥—Ä–æ–∫–æ–≤.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/players - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–∏\n"
        "/tournaments - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã"
    )


@app.on_message(filters.command("tournaments"))
async def show_tournaments(client, message):
    tournaments = get_tournaments()
    keyboard = []
    response = "üìÖ **–°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤:**\n\n"

    for tournament in tournaments:
        tournament_status = "–ê–∫—Ç–∏–≤–Ω—ã–π" if tournament[7].strip() == "active" else "–ó–∞–≤–µ—Ä—à–µ–Ω"
        keyboard.append([InlineKeyboardButton(tournament[1], callback_data=f"show_matches_{tournament[0]}")])
        response += f" {tournament[0]}: {tournament[1]} (–î–∞—Ç–∞: {tournament[2]}, –°—Ç–∞—Ç—É—Å: {tournament_status})\n"

    await message.reply_text(response, reply_markup=InlineKeyboardMarkup(keyboard))


@app.on_message(filters.photo)
async def handle_photo(client, message):
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    tournament_id = None

    if message.caption and message.caption.isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏
        tournament_id = int(message.caption)

    if tournament_id is None:
        await message.reply_text("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Ç—É—Ä–Ω–∏—Ä–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photo_file_id = message.photo.file_id  # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_tournament_image(tournament_id, photo_file_id)

    await message.reply_text("‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ç—É—Ä–Ω–∏—Ä—É.")


@app.on_callback_query(filters.regex(r"^show_matches_\d+$"))
async def handle_callback_query(client, callback_query):
    tournament_id = int(callback_query.data.split("_")[2])
    tournament = get_tournament_by_id(tournament_id)

    if not tournament:
        await callback_query.message.reply_text("‚ùó –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    response = f"üìÖ {tournament[1]} (–î–∞—Ç–∞: {tournament[2]}, –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω—ã–π' if tournament[7].strip() == 'active' else '–ó–∞–≤–µ—Ä—à–µ–Ω'})\n\n"
    response += f"üìç –ú–µ—Å—Ç–æ: {tournament[3]}\n"
    response += f"üèÜ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: {tournament[4]}\n"
    response += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {tournament[5]}\n\n"
    response += "üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:\n"

    requests = get_tournament_requests(tournament_id)
    if requests:
        for index, req in enumerate(requests, start=1):
            username = req[0]
            full_name = req[1]
            response += f"{index}. {full_name} (@{username})\n"
    else:
        response += "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤."

    keyboard = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if tournament[7].strip() == "active":
        keyboard.append([InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data=f"register_{tournament_id}")])

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if callback_query.from_user.id == ADMIN_USER_ID:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        keyboard.append([
            InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status_{tournament_id}"),
            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data=f"delete_{tournament_id}")
        ])

    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(response, reply_markup=reply_markup)
    except Exception as e:
        print(f"Error updating message: {e}")  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ


@app.on_callback_query(filters.regex(r"^delete_\d+$"))
async def delete_tournament(client, callback_query):
    tournament_id = int(callback_query.data.split("_")[1])

    # –£–¥–∞–ª—è–µ–º —Ç—É—Ä–Ω–∏—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('tennis_club.db')
    cursor = conn.cursor()
    cursor.execute("DELETE FROM tournaments WHERE id = ?", (tournament_id,))
    conn.commit()
    conn.close()

    await callback_query.message.reply_text("‚úÖ –¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    await show_tournaments(client, callback_query.message)


@app.on_callback_query(filters.regex(r"^change_status_\d+$"))
async def change_status(client, callback_query):
    tournament_id = int(callback_query.data.split("_")[2])
    tournament = get_tournament_by_id(tournament_id)

    if tournament:
        new_status = 'finished' if tournament[7].strip() == 'active' else 'active'
        conn = sqlite3.connect('tennis_club.db')
        cursor = conn.cursor()
        cursor.execute("UPDATE tournaments SET status = ? WHERE id = ?", (new_status, tournament_id))
        conn.commit()
        conn.close()

        await callback_query.message.reply_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ {first_name} {last_name}?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{first_name}_{last_name}")],
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")]
            ])
        )

@app.on_callback_query(filters.regex(r"^delete_player_\d+$"))
async def handle_delete_player(client, callback_query):
    player_index = int(callback_query.data.split("_")[2]) - 1
    players = await fetch_players()

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏: {players}")

    if player_index < 0 or player_index >= len(players):
        await callback_query.answer("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    player = players[player_index]
    first_name = player[1]
    last_name = player[2]

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    logging.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞: {first_name} {last_name}")

    await callback_query.message.reply_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ {first_name} {last_name}?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–∞", callback_data=f"confirm_delete_{first_name}_{last_name}")],
            [InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_delete")]
        ])
    )


@app.on_callback_query(filters.regex(r"^confirm_delete_"))
async def confirm_delete_player(client, callback_query):
    data = callback_query.data.split("_")
    first_name = data[2]
    last_name = data[3]

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    logging.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞: {first_name} {last_name}")

    # –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    deleted = await delete_player_from_db(first_name, last_name)

    if deleted:
        await callback_query.message.reply_text(f"‚úÖ –ò–≥—Ä–æ–∫ {first_name} {last_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await callback_query.message.reply_text(f"‚ùå –ò–≥—Ä–æ–∫ {first_name} {last_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    await show_players(client, callback_query.message)

@app.on_callback_query(filters.regex(r"^confirm_delete_"))
async def confirm_delete_player(client, callback_query):
    data = callback_query.data.split("_")
    first_name = data[2]
    last_name = data[3]

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    print(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞: {first_name} {last_name}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥

    # –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    deleted = await delete_player_from_db(first_name, last_name)

    if deleted:
        await callback_query.message.reply_text(f"‚úÖ –ò–≥—Ä–æ–∫ {first_name} {last_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await callback_query.message.reply_text(f"‚ùå –ò–≥—Ä–æ–∫ {first_name} {last_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    await show_players(client, callback_query.message)


@app.on_message(filters.command("register"))
async def register_player(client, message):
    if message.from_user.id == ADMIN_USER_ID:
        await message.reply_text("‚ùóÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä—ã.")
        return

    # –õ–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞


@app.on_message(filters.command("players"))
async def show_players(client, message):
    players = await fetch_players()
    response = "üèÖ **–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:**\n\n"
    keyboard = []

    for index, player in enumerate(players, start=1):
        response += f"{index}. {player[1]} {player[2]} - –†–µ–π—Ç–∏–Ω–≥: {player[3]}\n"
        keyboard.append([InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_player_{index}")])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è

    await message.reply_text(response, reply_markup=InlineKeyboardMarkup(keyboard))



@app.on_message(filters.command("add_player"))
async def add_player_command(client, message):
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    await message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞, —Ñ–∞–º–∏–ª–∏—é –∏ —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–ò–º—è –§–∞–º–∏–ª–∏—è –†–µ–π—Ç–∏–Ω–≥'.")


@app.on_message(filters.command("delete_player"))
async def delete_player_command(client, message):
    await message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–ò–º—è –§–∞–º–∏–ª–∏—è'.")

@app.on_message(filters.text)
async def handle_delete_player_response(client, message):
    if message.from_user.id != ADMIN_USER_ID:
        return  # –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    parts = message.text.split()
    if len(parts) != 2:
        await message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        return

    first_name, last_name = parts

    # –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    deleted = await delete_player_from_db(first_name, last_name)

    if deleted:
        await message.reply_text(f"‚úÖ –ò–≥—Ä–æ–∫ {first_name} {last_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await message.reply_text(f"‚ùå –ò–≥—Ä–æ–∫ {first_name} {last_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@app.on_message(filters.command("admin_menu"))
async def admin_menu(client, message):
    if message.from_user.id != ADMIN_USER_ID:
        await message.reply_text("‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º—É –º–µ–Ω—é.")
        return

    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="add_tournament")],
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä—ã", callback_data="show_tournaments")]
    ]

    await message.reply_text("üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**", reply_markup=InlineKeyboardMarkup(keyboard))


app.run()
